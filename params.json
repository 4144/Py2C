{"name":"Py2c","tagline":"Py2C â€” a Python to C++ converter","body":"## Py2C\r\n\r\n[![Build Status](https://travis-ci.org/pradyun/Py2C.svg?branch=master)](https://travis-ci.org/pradyun/Py2C)\r\n[![Coverage Status](https://img.shields.io/coveralls/pradyun/Py2C.svg)](https://coveralls.io/r/pradyun/Py2C?branch=master)\r\n\r\nA trans-compiler for compiling Python code into hopefully human-readable\r\nC++ code, (hopefully) somewhat like what humans might actually write.\r\n\r\nThis project is currently focused on statically typed programs and optimizing them. This means the current scope of the project is limited. On some future date, this project may also support the entire dynamism of Python, subject to whether such a change is helpful and feasible for the project.\r\n\r\nThe idea is that even in highly dynamic languages (like Python) variables often end up holding (references to) values have only one \"type\". This is a major area for improving performance as statically typed languages (like C++) often are better with, well, typed variables. So if these one-type variables can be in a faster language, why not have them there?\r\n\r\nWell because then you have to leave the comforts of Python and write C++ code. And here's where Py2C's supposed to come in! You can just tweak the existing Python code a bit and pass it through Py2C and it automagically outputs C++ code that does that same thing as the Python code, just a whole lot faster!\r\n\r\nHere's Py2C in action (rather Py2C's planned action) on \"Hello World!\":\r\n\r\n```python\r\nprint(\"Hello World!\")\r\n```\r\n\r\nThe above should compile to something like:\r\n\r\n```cpp\r\n#include <iostream.h>\r\n\r\nint main() {\r\n   std::cout << \"Hello World!\\n\";\r\n   return 0;\r\n}\r\n```\r\n\r\nIf you think it is OK to have a special header file in the generated file\r\nit would compile to\r\n\r\n```cpp\r\n#include \"py2c.h\"\r\n\r\nint main() {\r\n    py2c::print(py2c::str(\"Hello World!\"));\r\n    return 0;\r\n}\r\n```\r\n\r\nPy2C is also extensible though a modifier API, which can be used to accommodate\r\nfor API changes across the languages, for third party packages (like NumPy).\r\n\r\nIf you are interested in participating in the development of this project,\r\nread the 'CONTRIBUTING.md' file in the repository root.\r\n\r\nFor more details, refer to the GitHub wiki pages. Oh wait! I have to write\r\nthem. Sorry!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}